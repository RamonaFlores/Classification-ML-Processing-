#!/usr/bin/env python3
"""
DataPros - Script de Ejecuci√≥n Principal
========================================

Este script ejecuta el an√°lisis completo de clasificaci√≥n de ingresos adultos.

Uso:
    python run_analysis.py

Autor: DataPros Team
Fecha: 2024
"""

import os
import sys
import subprocess
from pathlib import Path

def check_requirements():
    """
    Verifica que se cumplan los requisitos del sistema
    """
    print("üîç Verificando requisitos del sistema...")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # Verificar Java (requerido para Spark)
    try:
        result = subprocess.run(['java', '-version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Java est√° instalado")
        else:
            print("‚ùå Error: Java no est√° instalado (requerido para Spark)")
            return False
    except FileNotFoundError:
        print("‚ùå Error: Java no est√° instalado (requerido para Spark)")
        return False
    
    return True

def install_dependencies():
    """
    Instala las dependencias necesarias
    """
    print("\nüì¶ Instalando dependencias...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                      check=True)
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error al instalar dependencias")
        return False

def run_main_script():
    """
    Ejecuta el script principal de clasificaci√≥n
    """
    print("\nüöÄ Ejecutando an√°lisis de clasificaci√≥n...")
    try:
        script_path = Path("src/adult_income_classification.py")
        if not script_path.exists():
            print(f"‚ùå Error: No se encontr√≥ el archivo {script_path}")
            return False
        
        subprocess.run([sys.executable, str(script_path)], check=True)
        print("‚úÖ An√°lisis completado exitosamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al ejecutar el an√°lisis: {e}")
        return False

def run_demo():
    """
    Ejecuta el script de demostraci√≥n
    """
    print("\nüéØ Ejecutando demostraci√≥n de predicciones...")
    try:
        script_path = Path("src/demo_predictions.py")
        if not script_path.exists():
            print(f"‚ùå Error: No se encontr√≥ el archivo {script_path}")
            return False
        
        subprocess.run([sys.executable, str(script_path)], check=True)
        print("‚úÖ Demostraci√≥n completada exitosamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al ejecutar la demostraci√≥n: {e}")
        return False

def main():
    """
    Funci√≥n principal
    """
    print("=" * 60)
    print("üéØ DataPros - Clasificaci√≥n de Ingresos Adultos")
    print("=" * 60)
    
    # Verificar requisitos
    if not check_requirements():
        print("\n‚ùå Los requisitos del sistema no se cumplen")
        sys.exit(1)
    
    # Instalar dependencias
    if not install_dependencies():
        print("\n‚ùå Error al instalar dependencias")
        sys.exit(1)
    
    # Ejecutar an√°lisis principal
    if not run_main_script():
        print("\n‚ùå Error en el an√°lisis principal")
        sys.exit(1)
    
    # Ejecutar demostraci√≥n
    if not run_demo():
        print("\n‚ùå Error en la demostraci√≥n")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üéâ ¬°An√°lisis completado exitosamente!")
    print("=" * 60)
    print("\nüìã Archivos generados:")
    print("   ‚Ä¢ models/adult_income_model/ - Modelo entrenado")
    print("   ‚Ä¢ Logs de ejecuci√≥n en consola")
    
    print("\nüí° Pr√≥ximos pasos:")
    print("   ‚Ä¢ Revisar el notebook: src/notebook_analysis.ipynb")
    print("   ‚Ä¢ Usar el modelo para nuevas predicciones")
    print("   ‚Ä¢ Considerar optimizaciones adicionales")

if __name__ == "__main__":
    main()
